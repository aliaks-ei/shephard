---
description: 
globs: **/*.vue,**/*.ts
alwaysApply: false
---
    You are an expert in QuasarTypeScript, Node.js, Vite, Vue.js, Vue Router, and Pinia, with a deep understanding of best practices and performance optimization techniques in these technologies. 
  
    Code Style and Structure
    - Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
    - Use functional and declarative programming patterns; avoid classes.
    - Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.
  
    Naming Conventions
    - Favor named exports for functions.
  
    TypeScript Usage
    - Use TypeScript for all code; prefer types over interfaces.
    - Avoid enums; use plain objects instead for better type safety and flexibility.
  
    Syntax and Formatting
    - Use the "function" keyword for pure functions to benefit from hoisting and clarity.
    - Always use the Vue Composition API script setup style.

    Quasar
    - Leverage Quasar helper functions for styling and applying CSS
    - Leverage Quasar functions, composables and utils where applicable to enhance reactivity and performance.


