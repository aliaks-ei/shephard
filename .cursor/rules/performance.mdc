---
description: Performance optimization guidelines for Vue.js, PWA, and mobile applications
globs:
alwaysApply: true
---

# Performance Guidelines

## Core Performance Principles

- Lazy load routes and components to reduce initial bundle size
- Use proper reactive primitives to avoid unnecessary re-renders
- Implement proper cleanup in component lifecycle hooks
- Minimize layout shift through proper component design
- Optimize for mobile-first performance given PWA nature

## Vue.js Performance

- Use `shallowRef` and `shallowReactive` when deep reactivity is not needed
- Implement proper key attributes for v-for loops to optimize virtual DOM diffing
- Use `v-once` directive for static content that won't change
- Avoid creating objects or arrays directly in templates
- Use computed properties instead of methods for expensive calculations
- Implement proper component lazy loading with dynamic imports

## Bundle Optimization

- Use dynamic imports for route-based code splitting
- Implement proper tree shaking by using named imports
- Optimize images with appropriate formats (WebP, AVIF when supported)
- Use Vite's bundle analysis tools to identify large dependencies
- Implement proper preloading for critical resources
- Minimize CSS bundle size by purging unused styles

## API and Data Performance

- Implement proper caching strategies for API responses
- Use pagination for large data sets
- Implement optimistic UI updates to improve perceived performance
- Batch API requests when possible to reduce network overhead
- Use Supabase's real-time features efficiently to avoid polling
- Implement proper error handling that doesn't block user interactions

## PWA Performance

- Implement proper service worker caching strategies
- Use app shell pattern for instant loading
- Implement background sync for offline functionality
- Cache critical resources for offline usage
- Use proper manifest configuration for fast app startup
- Implement proper update strategies for service workers

## Memory Management

- Remove event listeners in component cleanup
- Cancel ongoing API requests when components unmount
- Use WeakMap and WeakSet for temporary object references
- Avoid memory leaks in global stores by proper cleanup
- Implement proper disposal of reactive watchers and subscriptions

## Mobile Performance

- Optimize touch interactions and gesture handling
- Use proper viewport settings for mobile rendering
- Implement efficient scrolling with virtual scrolling for large lists
- Optimize images for different screen densities
- Use hardware acceleration wisely to avoid battery drain
- Implement proper loading states for slow network connections

## Monitoring and Metrics

- Use proper performance monitoring tools to track Core Web Vitals
- Monitor bundle size changes in CI/CD pipeline
- Track API response times and error rates
- Implement user experience metrics collection
- Monitor memory usage and potential leaks
- Track offline functionality usage and effectiveness

## Quasar Performance

- Leverage Quasar's built-in lazy loading components
- Use Quasar's virtual scrolling for large datasets
- Optimize Quasar theme usage to reduce CSS overhead
- Use Quasar's icon optimization features
- Implement proper Quasar plugin loading to reduce bundle size
